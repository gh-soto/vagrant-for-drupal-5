<?php

/* $Id: relatedcontent.install,v 1.3.2.6 2008/01/28 18:58:25 tbarregren Exp $
 *
 * Copyright (C) 2007-2008 Thomas Barregren.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 
 
/**
 * @file
 * Installer script for the RelatedContent â€“ a Drupal module that allows
 * privileged users to add "related content" to the beginning or end of any
 * node.
 *
 * Author: 
 *   Thomas Barregren <http://drupal.org/user/16678>.
 */


/******************************************************************************
 * MYSQL
 ******************************************************************************/

/**
 * Install.
 */
function relatedcontent_install_mysql() {

  _relatedcontent_install_db_query(<<<SQL
CREATE TABLE IF NOT EXISTS {relatedcontent} (
  nid int NOT NULL,
  vid int NOT NULL,
  include_nid int NOT NULL,
  ordinal_number int NOT NULL,
  PRIMARY KEY (nid, vid, include_nid)
) /*!40100 DEFAULT CHARACTER SET utf8 */;
SQL
  );

  _relatedcontent_install_db_query(<<<SQL
CREATE TABLE IF NOT EXISTS {relatedcontent_view} (
  type varchar(32) NOT NULL,
  vid int NOT NULL,
  title char(128) DEFAULT '',
  weight int NOT NULL,
  enabled tinyint(1) NOT NULL,
  PRIMARY KEY(type, vid)
) /*!40100 DEFAULT CHARACTER SET utf8 */;
SQL
  );

}

/**
 * Uninstall.
 */
function relatedcontent_uninstall_mysql() {
  _relatedcontent_install_db_query('DROP TABLE {relatedcontent}');
  _relatedcontent_install_db_query('DROP TABLE {relatedcontent_view}');
}

/**
 * Update 1.
 */
function relatedcontent_update_1_mysql() {

  // Add the column ordinal_number to the table relatedcontent.
  $status[] = _relatedcontent_install_db_query('ALTER TABLE {relatedcontent} ADD COLUMN ordinal_number int NOT NULL');

  // Previous to this update, include_nid was used implicit as ordinal_number.
  // Therefore, To preserve the sort order, for each row, copy the value of
  // include_nid to ordinal_number.
  if ($result = db_query('SELECT nid, include_nid FROM {relatedcontent}')) {
    $query = 'UPDATE {relatedcontent} SET ordinal_number = %d WHERE nid = %d AND include_nid = %d';
    while ($row = db_fetch_object($result)) {
      $status[] = _relatedcontent_install_db_query($query, $row->include_nid, $row->nid, $row->include_nid);
    }
  }

  // Build a map of view names to view id.
  if ($result = db_query('SELECT vid, name FROM {view_view}')) {
    while ($row = db_fetch_object($result)) {
      $views[$row->name] = (int) $row->vid;
    }
  }

  // Update some variables for each content type.
  if ($result = db_query('SELECT type FROM {node_type}')) {
    while ($row = db_fetch_object($result)) {

      // Update the variable 'view' to hold the views' id instead of name.
      $variable = "relatedcontent_view_$row->type";
      $view = variable_get($variable, '');
      $has_view = $view && $views[$view];
      if ($has_view) {
        $status[] = _relatedcontent_install_variable_set($variable, $views[$view]);
      }
      
      // When upgrading from 1.0 or 1.1, the variable 'enabled' is implicit. In
      // version 1.5 it must be explicit.
      $variable = "relatedcontent_enabled_$row->type";
      if (variable_get($variable, null) === null && $has_view) {
        $status[] = _relatedcontent_install_variable_set($variable, true);
      }

    // Replace the variable 'after' with the variable 'placing'.
    $variable = "relatedcontent_output_after_$row->type";
    $new_variable = "relatedcontent_output_placing_$row->type";
    if (($after = variable_get("relatedcontent_output_after_$row->type", null)) !== null) {
      $status[] = _relatedcontent_install_variable_del($variable);
      $status[] = _relatedcontent_install_variable_set($new_variable, $after ? 'end' : 'beginning');
    };
    
    }
  }
    
  return $status;

}

/**
 * Update 2.
 */
function relatedcontent_update_2_mysql() {

  // Add the column vid to the table relatedcontent, and include it in the
  // primary key.
  $status[] = _relatedcontent_install_db_query('ALTER TABLE {relatedcontent} ADD COLUMN vid int NOT NULL');
  $status[] = _relatedcontent_install_db_query('ALTER TABLE {relatedcontent} DROP PRIMARY KEY');
  $status[] = _relatedcontent_install_db_query('ALTER TABLE {relatedcontent} ADD PRIMARY KEY (nid, vid, include_nid)');

  // Create the relatdcontent_view table.
  $status[] = _relatedcontent_install_db_query(<<<SQL
CREATE TABLE IF NOT EXISTS {relatedcontent_view} (
  type varchar(32) NOT NULL,
  vid int NOT NULL,
  title char(128) DEFAULT '',
  weight int NOT NULL,
  enabled tinyint(1) NOT NULL,
  PRIMARY KEY(type, vid)
) /*!40100 DEFAULT CHARACTER SET utf8 */;
SQL
  );

  // Get all available views.
  if ($result = db_query('SELECT vid, name FROM {view_view}')) {
    while ($view = db_fetch_object($result)) {
      $views[(int) $view->vid] = $view->name;
    }
  }

  // For each content type, do some updates.
  if ($result = db_query('SELECT type FROM {node_type}')) {
    while ($row = db_fetch_object($result)) {

      // Replace 'name' with 'author' as the value of the variable
      // 'output_grouped'.
      $variable = "relatedcontent_output_grouped_$row->type";
      $grouped = variable_get($variable, '');
      if ($grouped == 'name') {
        $status[] = _relatedcontent_install_variable_set($variable, 'author');      
      }

      // Build a string holding the values to insert into the
      // relatedcontent_view table.
      $vid = variable_get("relatedcontent_view_$row->type", 0);
      $view_exists = (boolean) $views[$vid];
      if ($view_exists) {
        $values .= "('$row->type', $vid, '', 0, 1),";
      }
    }

    // Insert the views in use for different  content types into the 
    // relatedcontent_view table.
    if ($values) {
      $values = substr($values, 0, -1);
      $status[] = _relatedcontent_install_db_query("INSERT INTO {relatedcontent_view} (type, vid, title, weight, enabled) VALUES $values");
    }
    
  }
  
  // For each node in the relatedcontent table, set the vid column.
  if ($result = db_query('SELECT DISTINCT r.nid, v.vid FROM {relatedcontent} r INNER JOIN {node} n INNER JOIN {relatedcontent_view} v ON r.nid = n.nid AND n.type = v.type')) {
    $query = 'UPDATE {relatedcontent} SET vid = %d WHERE nid = %d';
    while ($row = db_fetch_object($result)) {
      $status[] = _relatedcontent_install_db_query($query, $row->vid, $row->nid);
    }
  }
  
  return $status;

}


/******************************************************************************
 * HOOKS
 ******************************************************************************/

/**
 * Implements hook_install().
 */
function relatedcontent_install() {
  _relatedcontent_install_dispatcher(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function relatedcontent_uninstall() {
  _relatedcontent_install_dispatcher(__FUNCTION__);
  _relatedcontent_install_variable_delete_all();
}

/**
 * Implements hook_update_1().
 */
function relatedcontent_update_1() {
  return _relatedcontent_install_dispatcher(__FUNCTION__);
}

/**
 * Implements hook_update_2().
 */
function relatedcontent_update_2() {
  return _relatedcontent_install_dispatcher(__FUNCTION__);
}


/******************************************************************************
 * HELPERS
 ******************************************************************************/

/**
 * Dispatch the call for $hook to the database specific implementation of it.
 */
function _relatedcontent_install_dispatcher($hook) {
  global $db_type;
  $db = $db_type === 'mysqli' ? 'mysql' : $db_type;
  $op = substr($hook, strpos($hook, '_') + 1);
  $function = _relatedcontent_install_module_name() .'_'. $op .'_'. $db;
  if (function_exists($function)) {
    return $function();
  }
  else {
    $msg = t('!hook() doesn\'t support !db', array('!hook' => $hook, '!db' => $db));
    drupal_set_message($msg, 'error');
  }
}

/**
 * Execute a database query. Based on db_query() and update_sql().
 */
function _relatedcontent_install_db_query($query) {

  // Get the arguments.
  $args = func_get_args();
  array_shift($args);
  if (isset($args[0]) and is_array($args[0])) {
    $args = $args[0];
  }

  // Build the query.
  $query = db_prefix_tables($query);
  _db_query_callback($args, true);
  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);

  // Do the database query, and return the status.
  $result = _db_query($query);
  return array('success' => $result !== false, 'query' => check_plain($query));  

}

/**
 * Set the persisted variable $variable to the value of $value.
 */
function _relatedcontent_install_variable_set($variable, $value) {
  variable_set($variable, $value);
  $msg = t('variable_set(!variable, !value)', array('!variable' => "'$variable'", '!value' => is_string($value) ? "'$value'" : $value));
  return array('success' => true, 'query' => $msg);
}

/**
 * Delete the persisted variable $variable.
 */
function _relatedcontent_install_variable_del($variable) {
  variable_del($variable);
  $msg = t('variable_delete(!variable)', array('!variable' => "'$variable'"));
  return array('success' => true, 'query' => $msg);
}

/**
 * Delete all persisted variables that beginns with $prefix.
 */
function _relatedcontent_install_variable_delete_all() {
  global $conf;
  $prefix = _relatedcontent_install_module_name() .'_%';
  $result = db_query("SELECT name FROM {variable} WHERE name LIKE '%s'", $prefix);
  while ($row = db_fetch_array($result)) {
    unset($conf[$row['name']]);
  }
  $result = $result && db_query("DELETE FROM {variable} WHERE name LIKE '%s'", $prefix);
  cache_clear_all('variables', 'cache');
}

/**
 * Returns the name of this module.
 */
function _relatedcontent_install_module_name() {
  return substr(__FUNCTION__, 1, strpos(__FUNCTION__, '_', 1) - 1);
}
