<?php
// $Id: relevant_content.module,v 1.1.2.1 2007/11/01 15:40:56 njt1982 Exp $

/**
 * @file
 * This module provides blocks to inform users of relevant content. This is done on a per-content-type basis
 */


/**
 * Implementation of hook_help
 */
function relevant_content_help($section) {
  switch ($section) {
    case 'admin/help#relevant_content' :
      return t('Provides a block using the Views module to display relevant nodes for the current page.');
    case 'admin/settings/relevant_content' :
      $output  = '<p>' . t('On this page you can configure which blocks should be provided on a per-content-type basis. If you enabled a content type, please make sure to provided a block title.') . '</p>';
      $output .= '<p>' . t('The <em>Limit</em> field allows you to provide a maximum number of nodes to be displayed for that block.') . '</p>';
      $output .= '<p>' . t('The <em>Block Header Text</em> field allows you to provide some text which can appear at the top of the block - good for explaining to the user what the block is.') . '</p>';
      return $output;
  }
}


/**
 * Implementation of hook_perm
 */
function relevant_content_perm() {
  return array('administer relvant content');
}


/**
 * Implementation of hook_menu
 */
function relevant_content_menu($may_cache) {
  $items[] = array();
  
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/relevant_content',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('relevant_content_admin'),
      'access' => user_access('administer relvant content'),
      'title' => t('Relevant Content'),
    );
  }
  
  return $items;
}


/**
 * Settings page form
 * 
 * This function provides the module settings page form which is used for enabling
 * content type blocks.
 * 
 * @ingroup forms
 * @see relevant_content_admin_validate()
 * @see relevant_content_admin_submit()
 */
function relevant_content_admin() {
  $settings = variable_get('relevant_content', array());
  
  $form = array();
  $form['block_title'] = array('#tree' => true);
  $form['limit'] = array('#tree' => true);
  $form['header_text'] = array('#tree' => true);
  
  $types = node_get_types('names');
  $enabled = array();
  
  foreach ($types as $type => $name) {
    $enabled['options'][$type] = '';
    $enabled['enabled'][$type] = isset($settings[$type]) ? $type : null;
    
    $form['name'][$type] = array(
      '#type' => 'markup',
      '#value' => check_plain($name),
    );

    $form['block_title'][$type] = array(
      '#type' => 'textfield',
      '#size' => 20,
      '#maxlength' => 64,
      '#default_value' => empty($settings[$type]['block_title']) ? '' : $settings[$type]['block_title'],
    );

    $form['limit'][$type] = array(
      '#type' => 'textfield',
      '#size' => 3,
      '#maxlength' => 2,
      '#default_value' => empty($settings[$type]['limit']) ? '' : $settings[$type]['limit'],
    );

    $form['header_text'][$type] = array(
      '#type' => 'textarea',
      '#rows' => 1,
      '#cols' => 40,
      '#default_value' => empty($settings[$type]['header_text']) ? '' : $settings[$type]['header_text'],
    );
  }
  
  $form['enabled'] = array(
    '#type' => 'checkboxes',
    '#options' => $enabled['options'],
    '#default_value' => $enabled['enabled'],
  );
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  
  return $form;
}


/**
 * Format the module settings page form
 * 
 * @ingroup themeable
 */
function theme_relevant_content_admin($form) {
  $output = '';
  
  $rows = array();
  foreach (element_children($form['name']) as $key) {
    $row = array();
    
    $row[] = drupal_render($form['enabled'][$key]);
    $row[] = drupal_render($form['name'][$key]);
    $row[] = drupal_render($form['block_title'][$key]);
    $row[] = drupal_render($form['limit'][$key]);
    $row[] = drupal_render($form['header_text'][$key]);
    
    $rows[] = $row;
  }
  
  $headers = array(
    t('Enabled'),
    t('Content Type'),
    t('Block Title'),
    t('Limit'),
    t('Block Header Text'),
  );
  
  return theme('table', $headers, $rows) . drupal_render($form);
}


/**
 * Validation function for the module settings page
 */
function relevant_content_admin_validate($form_id, $form_values) {
  $types = node_get_types('names');

  foreach ($form_values['enabled'] as $key => $enabled) {
    if ($enabled) {
      $name = trim($form_values['block_title'][$key]);
      if (empty($name)) {
        form_set_error('block_title][' . $key, t('%name is enabled but has no title, please provide a title.', array('%name' => $types[$key])));
      }
      
      $limit = trim($form_values['limit'][$key]);
      if (empty($limit) || !is_numeric($limit)) {
        form_set_error('limit][' . $key, t('%name is enabled but either has no limit or the limit is not numeric, please provide a valid limit.', array('%name' => $types[$key])));
      }
    }
  }
}

/**
 * Submit handling function for the module settings page
 */
function relevant_content_admin_submit($form_id, $form_values) {
  $settings = array();
  
  foreach ($form_values['enabled'] as $key => $enabled) {
    if ($enabled) {
      $settings[$key] = array(
        'block_title' => $form_values['block_title'][$key],
        'limit' => (int)$form_values['limit'][$key],
        'header_text' => empty($form_values['header_text'][$key]) ? null : $form_values['header_text'][$key],
      );
    }
  }
  
  variable_set('relevant_content', $settings);
}


/**
 * Implementation of hook_block
 */
function relevant_content_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list' :
      $blocks = array();
      
      $settings = variable_get('relevant_content', array());
      if (!empty($settings)) {
        foreach ($settings as $type => $params) {
          $blocks[$type] = array(
            'info' => t('Relevant Content: @title', array('@title' => $params['block_title']))
          );
        }
      }
      
      
      return $blocks;
    
    case 'view' :
      $settings = variable_get('relevant_content', array());
      $terms = relevant_content_term_cache();
      if (!empty($terms)) {
        //Create a node exclusion list - this will exclude the currently viewed node - if applicable.
        //This stops the currently viewed node appearing top of a list - afterall, it IS the most relevant!
        $exclude = array();
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $exclude[] = arg(1);
        }
        
        if ($nodes = relevant_content_get_nodes($delta, $terms, $exclude, $settings[$delta]['limit'])) {
          $header = isset($settings[$delta]['header_text']) ? $settings[$delta]['header_text'] : false;
          return array(
            'title' => $settings[$delta]['block_title'],
            'content' => theme('relevant_content_block', $nodes, $header),
          );
        }
      }
      break;
  }
}

/**
 * Theme function for rendering the relevant nodes into a block.
 * 
 * This is provided so that an item list is the default, however a themer can
 * easily override this to make a teaser list or table.
 *
 * @param $nodes
 *   Associative array where the key is the node id and the value is the node title
 * @param $header
 *   Optional string to display at the top of the block
 */
function theme_relevant_content_block($nodes, $header = false) {
  $items = array();
  foreach ($nodes as $nid => $title) {
    $items[] = l($title, 'node/' . $nid);
  }
  
  $output = '';
  if ($header) {
    $output = check_markup($header);
  }
  
  $output .= theme('item_list', $items);
  return $output;
}


/**
 * Function to get a set of nodes.
 * 
 * This returns a set of nodes based on the provided type and array of term
 * ID's.
 *
 * @param $type
 *   String representing the node type (eg, 'blog')
 * @param $terms
 *   Array of values where the values are Term ID's
 * @param $exclude
 *   An array of Node ID's to exclude
 * @param $limit
 *   Integer controlling the maximum number of nodes returned
 * @return array
 *   Associative array in the form 'nid=>title'
 */
function relevant_content_get_nodes($type, $terms, $exclude = array(), $limit = 3) {
  if (empty($terms)) {
    return false;
  }
  
  $values = array();
  
  $args = implode(',', $terms);
  $values[] = $args;
  
  $values[] = $type;
  
  
  $excludeSQL = '';
  if (!empty($exclude)) {
    $values[] = implode(',', $exclude);
    $excludeSQL = 'AND n.nid NOT IN (%s)';
    
  }
  $values[] = $limit;
  
  
  $result = db_query('SELECT
                        n.nid AS nid,
                        n.title AS title,
                        COUNT(*) AS cnt
                      FROM {node} n
                      LEFT JOIN {term_node} tn ON tn.nid = n.nid AND tn.tid IN (%s)
                      WHERE n.type = "%s" AND n.status = 1 AND tn.tid IS NOT NULL ' . $excludeSQL . '
                      GROUP BY n.nid
                      ORDER BY cnt DESC, n.created DESC
                      LIMIT %d', $values);
  
  
  if (db_num_rows($result)) {
    $nodes = array();
    while ($row = db_fetch_object($result)) {
      $nodes[$row->nid] = $row->title;
    }
    return $nodes;
  }
  else {
    return false;
  }
}


/**
 * Function to locally cache terms
 * 
 * This allows either this module or any other module to add terms to the cache.
 * This cache is used to determine which nodes appear in the relevant content
 * blocks.
 *
 * @param $terms
 *   Array of term id's
 * @param $clear
 *   Boolean flag - can be set to force a clearing of the local cache.
 * @return
 *   Array of the term id's currently in the cache
 */
function relevant_content_term_cache($terms = array(), $clear = false) {
  static $term_cache = array();
  
  if ($clear) {
    $term_cache = array();
  }
  
  if (!empty($terms)) {
    $term_cache = array_merge($term_cache, $terms);
  }
  
  return $term_cache;
}


/**
 * Implementation of hook_nodeapi
 */
function relevant_content_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view' :
      if (!empty($node->taxonomy)) {
        relevant_content_term_cache(array_keys($node->taxonomy));
      }
      break;
  }
}