<?php
// $Id: join_role_with_password.module,v 1.1.2.1 2008/11/06 15:37:09 francoud Exp $

/**
 * @file
 * Allows users to join one role using a given password.
 */

/**
 * Implementation of hook_perm().
 */
function join_role_with_password_perm() {
  return array('administer join_role_with_password', 'May join new role');
}

/**
 * Implementation of hook_menu().
 */
function join_role_with_password_menu($may_cache) {
  global $user;
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/user/role_password',
      'title' => t('Manage role passwords'),
      'description' => t('Manage role passwords'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'join_role_with_password_addform',
      'access' => user_access('administer join_role_with_password'),
    );

    $items[] = array(
      'path' => 'admin/user/role_password/add',
      'title' => t('Add role password'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'join_role_with_password_addform',
      'access' => user_access('administer join_role_with_password'),
      'weight' => 0,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    $items[] = array(
      'path' => 'admin/user/role_password/remove',
      'title' => t('Remove role passwords'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'join_role_with_password_remove_form',
      'access' => user_access('administer join_role_with_password'),
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
    );

    $items[] = array(
      'path' => 'admin/user/role_password/changepwd',
      'title' => t('Change role passwords'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'join_role_with_password_changepwd_form',
      'access' => user_access('administer join_role_with_password'),
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
  } 
  else {
    $the_path = 'user/'.$user->uid.'/join_role' ;
    $items[] = array(
      'path' => $the_path,
      'title' => t('Join or leave a role'),
      'description' => t('Join a role with a password, or leave it'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'join_role_with_password_join_form',
      'access' => user_access('May join new role'),
      'type' => MENU_LOCAL_TASK,
    );
   
 }
 return $items;
}

/**
 * Implementation of hook_form():  form to ADD a password for one role;
 *                                 called from admin/user/role_password/add
 */
function join_role_with_password_addform() {

  $form = array();
  join_role_with_password_check_garbage_collection();

  $form['roles'] = array(
    '#title' => t('Add password to an existing role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

 /**
  *   query to select roles that have NO password defined in the roles_passwords table
  */
  $query = " SELECT role.rid,role.name FROM roles_passwords RIGHT JOIN role ON roles_passwords.rid = role.rid WHERE roles_passwords.rid IS NULL AND role.rid >2";
  $queryresult =  db_query($query);

  if (!$queryresult) {
    drupal_set_message(t('Error from the query!'));
    return;
  }
  elseif (!db_num_rows($queryresult)) {
    drupal_set_message(t('There is no role you can add a password!'));
    return;
  }  
  
 /**
  *  Building a form filter with all roles that have no password defined
  */
  while ($role = db_fetch_object($queryresult)) {
    $filter_roles[$role->rid] = $role->name;
  }

   $form['role_options'] = array(
    '#type' => 'value',
    '#value' => $filter_roles
   );
  
 /**
  *   implementation of the form; this will users able to join roles (giving a password) and 
  *   leave roles (no password required). 
  */

  $form['roles']['add_this_role'] = array(
    '#title' => t('Add a password to this role'),
    '#type' => 'select',
    '#description' => t('Authorized users will be able to join this role using a password'),
    '#options' => $form['role_options']['#value'],
   );
  
  $form['roles']['password'] = array(
    '#type' => 'password',
    '#title' => t('Insert a password'),
    '#description' => t('Give a password to this role')
  );
  
  $form['roles']['password2'] = array(
    '#type' => 'password',
    '#title' => t('Repeat the password'),
    '#description' => t('Repeat the password again')
  );

  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Give a password to this role'),
  );
   
  return $form;
}



/**
 * Implementation of hook_form(): validating the addform form
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */
function join_role_with_password_addform_validate($form_id, $form_values) {

  $new_password = $form_values['password'];
  $new_password2 = $form_values['password2'];

  if ($new_password != $new_password2) {
    form_set_error('password', t('Passwords mismatch'));
  }

  if  (!join_role_with_password_pass_is_good ($new_password)) {
    form_set_error('password', t('Invalid password')); 
  }
}

/**
 * Implementation of hook_form(): submitting the addform form
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */
function join_role_with_password_addform_submit($form_id, $form_values) {

  $role_key = $form_values['add_this_role'];
  $role_to_add = $form_values['role_options'][$role_key];
  $new_password = $form_values['password'];
  $new_password2 = $form_values['password2'];
  $crypt_pwd = md5($new_password);
 
  if (user_access('administer join_role_with_password') && isset($role_key)) {
     $query = "INSERT INTO roles_passwords (rid, pass) VALUES (%d, '%s')";
     db_query($query, $role_key, $crypt_pwd);
     drupal_set_message(t('Password added to role: %role', array('%role' => $role_to_add)));
  }
  else {
    drupal_set_message(t('Access denied'));
  }

}
 


/**
 * Implementation of hook_form():  form to REMOVE  a password for one role;
 *                                 called from admin/user/role_password/remove
 */
function join_role_with_password_remove_form() {

  $form = array();
  join_role_with_password_check_garbage_collection();
  
  $form['usedroles'] = array(
    '#title' => t('Remove password from a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    #collapsed' => FALSE,
  );
   
  $query1 = "SELECT roles_passwords.rid, roles_passwords.pass,role.name FROM {role,roles_passwords} WHERE roles_passwords.rid = role.rid";
  $queryresult1 =  db_query($query1);

   /* good for drupal 6? 
       if(!db_result($queryresult1)) {
      drupal_set_message(t('All roles already have some password'));
      return;  
      }
   */
  
  if (!$queryresult1) {
    drupal_set_message(t('Error from the query!'));
   }
   elseif (!db_num_rows($queryresult1)) {
     drupal_set_message(t('List of roles with password is empty!'));
     return;
   }  
  
   while ($usedrole = db_fetch_object($queryresult1)) {
     $filter_used_roles[$usedrole->rid] = $usedrole->name;
   }
  
   $form['usedrole_options'] = array(
     '#type' => 'value',
     '#value' => $filter_used_roles
    );
  

   $form['usedroles']['role_to_remove'] = array(
     '#title' => t('Remove password from this role'),
     '#type' => 'select',
     '#description' => t('If you remove password from a role, users will be no more able to join it using a password'),
     '#options' => $form['usedrole_options']['#value'],
    );
  

   /*  this could be alternative to the next submit
      $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Remove password from this role',
     );
    return $form;
   */
   
  return confirm_form($form,
    t('Remove role password'),
    'admin/user/role_password/remove', t('This action cannot be undone.'),
    t('Remove password from this role'), t('Cancel')  );
   
}


/**
 * Implementation of hook_form(): validating the remove form
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */
function join_role_with_password_remove_form_validate($form_id, $form_values) {

  if (!user_access('administer join_role_with_password')) {
    drupal_set_message(t('Access denied'));
    return;
  }

  $role_key = $form_values['role_to_remove']; 

  if (!isset($role_key)) {
    form_set_error('role_to_remove', t('Invalid role id'));
  }
  
  $role_is_in_table = join_role_with_password_check_has_password($role_key);
  
  if (!$role_is_in_table) {
    form_set_error('role_to_remove', t('Severe error: role is not in the table'));
    return $form;
  }

}

/**
 * Implementation of hook_form(): submitting the remove form
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */
function join_role_with_password_remove_form_submit($form_id, $form_values) {
  
  $role_key = $form_values['role_to_remove']; 
  $role_to_remove = $form_values['usedrole_options'][$role_key];
  // drupal_set_message('Removing '.$role_key.' - '.$role_to_add);
  if (user_access('administer join_role_with_password') && isset($role_key)) {
    $query = "DELETE FROM {roles_passwords} WHERE rid = %d ";
    $query_result = db_query($query, $role_key);
    if ($query_result) {
      $page_content .= t('Removed password from role: %role', array('%role' => $role_to_remove));
    }
    else {
      $page_content .= t('Error from query!');
    }
  }
  else { 
    $page_content .= t('Access denied');
  }
  drupal_set_message($page_content);

}


/**
 * Implementation of hook_form():  form to CHANGE  a password for one role;
 *                                 called from admin/user/role_password/changepwd
 */
 
function join_role_with_password_changepwd_form() {

  $form = array();
  join_role_with_password_check_garbage_collection();

  $form['usedroles'] = array(
    '#title' => t('Change password for a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $query1 = "SELECT roles_passwords.rid, roles_passwords.pass,role.name FROM {role,roles_passwords} WHERE roles_passwords.rid = role.rid";
  $queryresult1 =  db_query($query1);

     /* good for drupal 6? 
      if (!db_result($queryresult1)) {
         drupal_set_message(t('All roles already have some password'));
         return;  
      }
      */
  

  if (!$queryresult1) {
    drupal_set_message(t('Error from the query!'));
  }
  elseif (!db_num_rows($queryresult1)) {
    drupal_set_message(t('List of roles with password is empty!'));
    return;
  }  
  
  while ($usedrole = db_fetch_object($queryresult1)) {
    /* $output .= $role->rid . ' ('.$role->name. ') <br/>'; */
    $filter_used_roles[$usedrole->rid] = $usedrole->name;
  }
 
  $form['usedrole_options'] = array(
    '#type' => 'value',
    '#value' => $filter_used_roles
  );
 
  $form['usedroles']['role_to_change'] = array(
    '#title' => t('Change password to this role'),
    '#type' => 'select',
    '#description' => t('Choose what role to change the password'),
    '#options' => $form['usedrole_options']['#value'],
  );
  
    /*
     * This could be optional, in the future...

        $form['usedroles']['old_password'] = array(
          '#title' => t('old_password'),
          '#type' => 'password',
          '#description' => t('Please enter old password - this is for security check')
        );
    */

  $form['usedroles']['new_password'] = array(
    '#title' => t('New password'),
    '#type' => 'password',
    '#description' => t('You may enter a new password for this role')
  );
 
  $form['usedroles']['new_password2'] = array(
    '#title' => t('New password again'),
    '#type' => 'password',
    '#description' => t('Enter new password again')
  );
  

    /* drupal_set_message(t($page_content));*/

    /* This could be alternative to the next
     $form['submit'] = array(
       '#type' => 'submit',
       '#value' => 'change password',
     );
     return $form; 
    */

  return confirm_form($form,
    t('Change role password'),
    'admin/user/role_password/changepwd', t('This action cannot be undone.'),
    t('Change password to this role'), t('Cancel')  );

}

/**
 * Implementation of hook_form(): validating the changepwd form
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */
function join_role_with_password_changepwd_form_validate($form_id, $form_values) {

  $role_key = $form_values['role_to_change']; 
 
  $query = "SELECT pass FROM {roles_passwords} WHERE rid = %d";
  $queryresult =  db_query($query, $role_key);
  $previous_pwd = db_result($queryresult);
  /*$old_password = md5($form_values['old_password']); */

  $new_password = $form_values['new_password'];
  $new_password2 = $form_values['new_password2'];

  if ($new_password != $new_password2) {
    form_set_error('password', t('Passwords mismatch'));
  }

  if  (!join_role_with_password_pass_is_good ($new_password)) {
    form_set_error('password', t('Invalid password')); 
  }

  /* This could be an option in the future
       if ($old_password != $previous_pwd) {
        form_set_error('password', t('old password mismatch'));
       }
     */

}
 
/**
 * Implementation of hook_form(): submitting the changepwd form
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */ 
function join_role_with_password_changepwd_form_submit($form_id, $form_values) {  

  $role_key       = $form_values['role_to_change']; 
  $role_to_change = $form_values['usedrole_options'][$role_key];
  $new_pwd        = $form_values['new_password'];
  $crypt_pwd      = md5($new_pwd);
  /* drupal_set_message('changing '.$role_key.' - '.$role_to_change. ' - '.$new_pwd);  */
  if (user_access('administer join_role_with_password') && isset($role_key)) {
    $query = "UPDATE  {roles_passwords} SET pass='%s' WHERE rid = %d";
    $query_result = db_query($query, $crypt_pwd, $role_key);
    if (!$query_result) {
      drupal_set_message(t('Error from the query!'));
    }
    else {
       $page_content .= t('Role %role updated - password changed!', array('%role' => $role_to_change));
    }
  }
  else { 
    $page_content .= t('Access denied');
  }
  drupal_set_message($page_content);
}


/**
  * Implementation of hook_form():  form to allow an user to Join or Leave a role;
  *                                 called from user/x/join_role
  */
function join_role_with_password_join_form() {

  global $user;
  if (!user_access('May join new role')) {
    drupal_set_message(t('Access denied'));
    return;
  }
  $form = array();
  $query1 = "SELECT roles_passwords.rid, roles_passwords.pass,role.name FROM {role,roles_passwords} WHERE roles_passwords.rid = role.rid";
  $queryresult1 =  db_query($query1);

  if (!$queryresult1) {
     drupal_set_message(t('Error from the query!'));
  }
  elseif (!db_num_rows($queryresult1)) {
    drupal_set_message(t('List of roles with password is empty!'));
    return;
  }  
  $filter_removable_roles[0] = '(none)';
  $filter_joinable_roles[0] = '(none)';

  while ($usedrole = db_fetch_object($queryresult1)) {
    $the_role = $usedrole->name;
    $rid = $usedrole->rid;

    /* I dont remember why I did this, anc why then I commented it out... :-d :D
      if (!$user->roles[$rid] && (db_result(db_query("SELECT uid, rid FROM {users_roles_apply} WHERE uid = %d AND rid = %d", $user->uid, $rid)) == 0)) {
        $filter_roles[$rid] = $role;
       }
    */

   if (!in_array($usedrole->name, $user->roles)) {
     $filter_joinable_roles[$usedrole->rid] = $usedrole->name;
    }
    else {
      $filter_removable_roles[$usedrole->rid] = $usedrole->name;
   }

  }
 
    /* for testing only
     $current_list_message .= "List of your active roles:";
     foreach($user->roles as $removable_element) {
       $current_list_message.= " ".$removable_element.",";
    }
    drupal_set_message($current_list_message);
    */
 
  $form['joinable_options'] = array(
    '#type' => 'value',
    '#value' => $filter_joinable_roles,
    '#default_value' => 0,
  );
  
  $form['removable_options'] = array(
    '#type' => 'value',
    '#value' => $filter_removable_roles,
    '#default_value' => 0,
  );
  
  $form['join_roles'] = array(
    '#title' => t('Join a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['join_roles']['role_to_join'] = array(
    '#title' => t('Join this role'),
    '#type' => 'select',
    '#description' => t('You can join one of these roles if u know the correct password'),
    '#options' => $form['joinable_options']['#value'],

    /* this is dangerous. If enabled, it will avoid watchdog messages when users tries to
     *  join/remove roles that no more exists. But u need to implement a good validation then!
     */
     //   '#DANGEROUS_SKIP_CHECK'=>true,

  );
  
  $form['join_roles']['password_join'] = array(
    '#type' => 'password',
    '#title' => t('Insert a password'),
    '#description' => t('Enter the correct password to join this role')
  );
  
  $form['leave_roles'] = array(
    '#title' => t('Leave a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['leave_roles']['role_to_leave'] = array(
    '#title' => t('Leave this role'),
    '#type' => 'select',
    '#description' => t('You can leave one of this roles; you dont need to know the password to leave it'),
    '#options' => $form['removable_options']['#value'],
 
    /* this is dangerous. If enabled, it will avoid watchdog messages when users tries to
     *  join/remove roles that no more exists. But u need to implement a good validation then!
     */
    //   '#DANGEROUS_SKIP_CHECK'=>true,

  );
  
  /* this could  be a future settings option, something like "enforce using password to leave role"?
    $form['leave_roles']['password_leave'] = array(
      '#type' => 'password',
      '#title' => t('Insert a password'),
      '#description' => t('Enter the correct password to leave this role')
    ); 
  */

 $form['submit'] = array(
   '#type' => 'submit',
   '#value' => t('Do it now'),
 );
    
  return $form;  
 
    /* this could be alternative to the previous simple submit form
      return confirm_form($form,
        t('Join this role'),
        'admin/user/role_password/remove', t('This action cannot be undone.'),
        t('Remove password from this role'), t('Cancel')  );
    */

}


/**
 * Implementation of hook_form(): submitting the Join form (validation built inside this function)
 * 
 * @param $form_id  The form identification
 * @param $form_values Values from the form
 * 
 */
function join_role_with_password_join_form_submit($form_id, $form_values) {

  global $user;
  if (!user_access('May join new role')) { 
    drupal_set_message(t('Access denied'));
  return 0;
  }

  $role_join_key = $form_values['role_to_join']; 
  $role_to_join = $form_values['joinable_options'][$role_join_key];
 
 /**
  * Here user wants to join a role
  */

  if ($role_join_key != 0) {
   // $page_content .= 'Role to join: '.$role_to_join . ' ('.$role_join_key.')';
    $clear_password = $form_values['password_join']; 

    if ((!isset($clear_password)) || ($clear_password == '')) {
      form_set_error('password_join', t('Missing password'));
      return $form;
    } 
 
    if  (!join_role_with_password_pass_is_good($clear_password)) {
      form_set_error('password_join', t('Malformed password')); 
      return $form;
    }
   
    if (!join_role_with_password_check_exists($role_join_key)) {
      form_set_error('role_to_join', t('Sorry, that role does no more exists')); 
      return $form;
    }
 
    $role_join_key = $form_values['role_to_join']; 
    $is_role_in_table = join_role_with_password_check_has_password($role_join_key);
    if (!is_role_in_table) {
      form_set_error('role_to_join', t('Invalid role id'));
    }

    $hashed_pwd = md5($clear_password);
    $query = "SELECT pass FROM {roles_passwords} WHERE rid = %d";
    $result = db_query($query, $role_join_key);
    $hashed_original_pwd = db_result($result, 0);
    if ($hashed_pwd == $hashed_original_pwd) {
      $sql = 'INSERT INTO {users_roles} (uid, rid) values (%d, %d)';
      $result_join = db_query($sql, $user->uid, $role_join_key);
      if (!$result_join) {
         drupal_set_message(t('Error from the query!'));
      }
      else {
        drupal_set_message(t("You have joined the role: %role_name ", array('%role_name' => $role_to_join)));
      }
    }
    else {
      form_set_error('password_join', t('Invalid password for role: %role_name', array('%role_name' => $role_to_join)));
      /*     return $form;*/
    }

}
   /*  end of: case of:  joining a role */ 
 

 /**
  * Here user wants to leave a role
  */

  $role_leave_key = $form_values['role_to_leave']; 
 
  if ($role_leave_key != 0) {
    if (!join_role_with_password_check_exists($role_leave_key)) {
      form_set_error('role_to_leave', t('Sorry, that role does no more exists')); 
      return $form;
    }
 
    $role_to_leave = $form_values['removable_options'][$role_leave_key];
    $remove_query = "DELETE FROM {users_roles} WHERE (rid = %d) AND (uid = %d)";
    $result_leave = db_query($remove_query, $role_leave_key, $user->uid);
    if (!$result_leave) {
      drupal_set_message(t('Error from the query!'));
    }
    else {
      drupal_set_message(t('You have left role: %role', array('%role' => $role_to_leave)));
    }
 
 }

  /* end of: case of leaving a role */
 
  return $form;
}

/**
 * Function to check if a given role is in the roles_passwords table
 * 
 * @param $role_id  The number of the role
 * 
 * @return $bool True or false
 * 
 */
function join_role_with_password_check_has_password($role_id) {

  if (!isset($role_id)) {
    drupal_set_message(t('Invalid call - $role_id does not exist'));
    return FALSE;
  }

  $query = "SELECT rid FROM {roles_passwords} WHERE rid = %d";
  $result_check = db_query($query, $role_id);

  if ($result_check) {
    return TRUE;
  }
  else {
    return FALSE;
  }

}


/**
 * Function to check if a given role is in the role table
 * (if not, maybe admin. deleted it while user is working?
 * 
 * @param $role_id  The number of the role
 * 
 * @return $bool True or false
 * 
 */
function join_role_with_password_check_exists($role_id) {
  
  if (!isset($role_id)) {
    drupal_set_message(t('Invalid call - $role_id does not exist'));
    return FALSE;
  }

  $query = "SELECT rid FROM {role} WHERE rid = %d";
  // $result_check=db_query($query,$role_id);
  $result_check = db_result(db_query($query, $role_id));
  if ($result_check) {
    return TRUE;
  }
  else {
    return FALSE;
  }

}

/**
 * Function to check if a given password is well formed; also include a length check 
 * (this maybe should be removed in the future)
 * 
 * @param $password  A password
 * 
 * @return $bool True or false
 * 
 */
function join_role_with_password_pass_is_good($pass) {

  $good_password = TRUE;
  if (strlen($pass) < 6) {
    $good_password = FALSE;
    drupal_set_message(t('Password too short'));
  }

  if (trim($pass) == "")  {
    $good_password = FALSE;
    drupal_set_message(t('Password is blank or empty'));
  }

  return $good_password;

}


/**
 * Function to remove roles from roles_passwords that are no more
 * defined in the "role" table because administrator deleted them.
 *  
 */

function join_role_with_password_check_garbage_collection() {

   if (!user_access('administer join_role_with_password')) {
     return;
   }

  $query = "SELECT roles_passwords.rid FROM roles_passwords LEFT JOIN role ON roles_passwords.rid = role.rid WHERE role.rid IS NULL";
   
  $queryresult =  db_query($query);
  

  if (!$queryresult) {
    drupal_set_message(t('Error from the query!'));
    return;
  }
  elseif (!db_num_rows($queryresult)) {
     /* drupal_set_message(t('Nothing to clean up')); */
    return;
  }  
 
/**
 *  Deleting all roles in "roles_passwords" table that are no more present in the "role" table
 */
  while ($role = db_fetch_object($queryresult)) {
     /* drupal_set_message ('Must remove: '.$role->rid);*/
    $query2 = "DELETE FROM roles_passwords WHERE roles_passwords.rid = %d";
    $query2Result = db_query($query2, $role->rid);
    if ($query2Result)  {
      $removed_role = $role->rid;
      drupal_set_message(t('Database cleanup: role %removed has been removed.', array('%removed' => $removed_role)));
    }
  }

}

 ?>
